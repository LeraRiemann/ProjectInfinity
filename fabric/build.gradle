plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

processResources {
    from(rootProject.file("common/src/main/resources")) {
        include("config/*/")
        include("infinity.accesswidener")
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}


repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "CC: Tweaked"
                url = "https://maven.squiddev.cc"
            }
        }
        filter {
            includeGroup "cc.tweaked"
        }
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Fabricators of Create"
        url = "https://mvn.devos.one/snapshots"
    }


    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes


}


dependencies {
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    // Mod Menu + Cloth Config for config on Fabric
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    // Optional mod compat
    modImplementation("cc.tweaked:cc-tweaked-$minecraft_version-fabric:$cct_version")
    modImplementation("com.github.qouteall:GravityChanger:v${gravity_changer_version}-mc${minecraft_version}")
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

     // EMI
    modCompileOnly("dev.emi:emi-fabric:$emi_version+$minecraft_version:api")
    modLocalRuntime("dev.emi:emi-fabric:$emi_version+$minecraft_version")


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}


configurations.configureEach {
    resolutionStrategy {
        force("io.github.fabricators_of_create.Porting-Lib:tags:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:brewing:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:client_events:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:tool_actions:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:models:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:transfer:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:obj_loader:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:networking:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:extensions:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:entity:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:base:${porting_lib_version}")

    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
