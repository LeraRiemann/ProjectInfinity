plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

processResources {
    from(rootProject.file("common/src/main/resources")) {
        include("config/*/")
        include("infinity.accesswidener")
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "CC: Tweaked"
                url = "https://maven.squiddev.cc"
            }
        }
        filter {
            includeGroup "cc.tweaked"
        }
    }
    maven { url 'https://jitpack.io' }

}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$project.architectury_api_version"

    // Mod Menu and Cloth Config
    modImplementation("com.terraformersmc:modmenu:$project.modmenu_version")
    modApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }
//    modRuntimeOnly("com.github.iPortalTeam:DimLib:${dimlib_version}") {
//        exclude(group: "net.fabricmc.fabric-api")
//    }

    // EMI
    modCompileOnly("dev.emi:emi-xplat-intermediary:$emi_version+1.21.1:api")
//    modLocalRuntime("dev.emi:emi-fabric:$emi_version+$minecraft_version")

    // EIV
    modImplementation "maven.modrinth:eiv:${eiv_version}+${minecraft_version}"


    // Devenv helpers
//    modImplementation "maven.modrinth:uwrad:1.1.0"
//    modImplementation "maven.modrinth:dev-tools-unlocker:1.0.0"
    modCompileOnly("cc.tweaked:cc-tweaked-1.21.1-fabric:$cct_version")


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
