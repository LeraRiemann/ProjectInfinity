architectury {
    common rootProject.enabled_platforms.split(',')
}

repositories {
    maven {
        url "https://maven.squiddev.cc"
        content {
            includeGroup("cc.tweaked")
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url 'https://jitpack.io' }
    exclusiveContent {
        forRepository {
            maven {
                name = "Fabricators of Create"
                url = "https://mvn.devos.one/snapshots"
            }
        }
        filter {
            includeGroup "io.github.fabricators_of_create"
            includeGroup "io.github.fabricators_of_create.Porting-Lib"
            includeGroup "com.tterrag.registrate_fabric"
            includeGroup "io.github.tropheusj"
            includeGroup "com.simibubi.create"
        }
    }
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury:$project.architectury_api_version"

    // Cloth Config API.
    modApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi("com.github.iPortalTeam:DimLib:${dimlib_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // CC Tweaked
    modImplementation("cc.tweaked:cc-tweaked-$minecraft_version-fabric:$cct_version")

    // EMI
    modCompileOnly("dev.emi:emi-xplat-intermediary:$emi_version+$minecraft_version:api")

    // Create
    modCompileOnly("net.createmod.ponder:Ponder-Fabric-${minecraft_version}:${ponder_version}")
    modCompileOnly("com.simibubi.create:create-fucked-up-${minecraft_version}:6.0.6+053024d") { transitive = false }
}

loom {
    accessWidenerPath = file("src/main/resources/infinity.accesswidener")
}