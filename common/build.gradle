architectury {
    common rootProject.enabled_platforms.split(',')
}


repositories {
    maven {
        url "https://maven.squiddev.cc"
        content {
            includeGroup("cc.tweaked")
        }
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Fabricators of Create"
                url = "https://mvn.devos.one/snapshots"
            }
        }
        filter {
            includeGroup "io.github.fabricators_of_create"
            includeGroup "io.github.fabricators_of_create.Porting-Lib"
            includeGroup "com.tterrag.registrate_fabric"
            includeGroup "io.github.tropheusj"
            includeGroup "com.simibubi.create"
        }
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
}

dependencies {
    // We depend on Fabric Loader here to use the Fabric @Environment annotations,
    // which get remapped to the correct annotations on each platform.
    // Do NOT use other classes from Fabric Loader.
    modImplementation "net.fabricmc:fabric-loader:$project.fabric_loader_version"

    // Fabric API/Forgified Fabric API.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$project.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury:$project.architectury_api_version"

    // Cloth Config API.
    modApi("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_version") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // CC Tweaked
    modImplementation("cc.tweaked:cc-tweaked-$minecraft_version-fabric:$cct_version")
    modImplementation("com.github.qouteall:GravityChanger:v${gravity_changer_version}-mc${minecraft_version}")

    // EMI
    modCompileOnly("dev.emi:emi-xplat-intermediary:$emi_version+$minecraft_version:api")

    // Create
    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")


}

configurations.configureEach {
    resolutionStrategy {
        force("io.github.fabricators_of_create.Porting-Lib:tags:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:brewing:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:client_events:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:tool_actions:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:models:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:transfer:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:obj_loader:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:networking:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:extensions:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:entity:${porting_lib_version}")
        force("io.github.fabricators_of_create.Porting-Lib:base:${porting_lib_version}")

    }
}

loom {
    accessWidenerPath = file("src/main/resources/infinity.accesswidener")
}